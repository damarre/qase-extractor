"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Results = void 0;
var models_1 = require("../models");
var _1 = require(".");
var Results = /** @class */ (function (_super) {
    __extends(Results, _super);
    function Results() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Results.prototype.getAll = function (code, _a) {
        var limit = _a.limit, offset = _a.offset, filters = _a.filters;
        var filterParams = new models_1.Filter(filters === null || filters === void 0 ? void 0 : filters.filter).filter();
        return this.api
            .get("/result/" + code, { params: __assign({ limit: limit, offset: offset }, filterParams) })
            .then(this.validateResponse());
    };
    Results.prototype.get = function (code, hash) {
        return this.api
            .get("/result/" + code + "/" + hash)
            .then(this.validateResponse());
    };
    Results.prototype.exists = function (code, hash) {
        return this.get(code, hash)
            .then(function (resp) { return Boolean(resp.data.hash); })
            .catch(function () { return false; });
    };
    Results.prototype.create = function (code, runId, data) {
        return this.api
            .post("/result/" + code + "/" + runId, data)
            .then(this.validateResponse());
    };
    Results.prototype.update = function (code, runId, hash, data) {
        return this.api
            .patch("/result/" + code + "/" + runId + "/" + hash, data)
            .then(this.validateResponse());
    };
    Results.prototype.delete = function (code, runId, hash) {
        return this.api
            .delete("/result/" + code + "/" + runId + "/" + hash)
            .then(this.validateResponse());
    };
    return Results;
}(_1.BaseService));
exports.Results = Results;
//# sourceMappingURL=results.js.map