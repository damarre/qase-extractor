"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Attachments = void 0;
var _1 = require(".");
var form_data_1 = __importDefault(require("form-data"));
var Attachments = /** @class */ (function (_super) {
    __extends(Attachments, _super);
    function Attachments() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Attachments.prototype.getAll = function (_a) {
        var limit = _a.limit, offset = _a.offset;
        return this.api
            .get('/attachment', { params: { limit: limit, offset: offset } })
            .then(this.validateResponse());
    };
    Attachments.prototype.get = function (hash) {
        return this.api
            .get("/attachment/" + hash)
            .then(this.validateResponse());
    };
    Attachments.prototype.create = function (code) {
        var files = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            files[_i - 1] = arguments[_i];
        }
        var data = new form_data_1.default();
        files.forEach(function (_a, index) {
            var value = _a.value, filename = _a.filename;
            data.append(index.toString(), value, filename);
        });
        return this.api
            .post("/attachment/" + code, data, { headers: data.getHeaders() })
            .then(this.validateResponse());
    };
    Attachments.prototype.delete = function (hash) {
        return this.api
            .delete("/attachment/" + hash)
            .then(this.validateResponse());
    };
    Attachments.prototype.exists = function (code) {
        return this.get(code)
            .then(function (resp) { return Boolean(resp.data.hash); })
            .catch(function () { return false; });
    };
    return Attachments;
}(_1.BaseService));
exports.Attachments = Attachments;
//# sourceMappingURL=attachments.js.map