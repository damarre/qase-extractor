"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Filter = exports.Automation = exports.Behavior = exports.Type = exports.Priority = exports.Severity = exports.AccessLevel = void 0;
var AccessLevel;
(function (AccessLevel) {
    AccessLevel["ALL"] = "all";
    AccessLevel["GROUP"] = "group";
    AccessLevel["NONE"] = "none";
})(AccessLevel = exports.AccessLevel || (exports.AccessLevel = {}));
var Severity;
(function (Severity) {
    Severity["UNDEFINED"] = "undefined";
    Severity["BLOCKER"] = "blocker";
    Severity["CRITICAL"] = "critical";
    Severity["MAJOR"] = "major";
    Severity["NORMAL"] = "normal";
    Severity["MINOR"] = "minor";
    Severity["TRIVIAL"] = "trivial";
})(Severity = exports.Severity || (exports.Severity = {}));
var Priority;
(function (Priority) {
    Priority["UNDEFINED"] = "undefined";
    Priority["HIGH"] = "high";
    Priority["MEDIUM"] = "medium";
    Priority["LOW"] = "low";
})(Priority = exports.Priority || (exports.Priority = {}));
var Type;
(function (Type) {
    Type["OTHER"] = "other";
    Type["FUNCTIONAL"] = "functional";
    Type["SMOKE"] = "smoke";
    Type["REGRESSION"] = "regression";
    Type["SECURITY"] = "security";
    Type["USABILITY"] = "usability";
    Type["PERFORMANCE"] = "performance";
    Type["ACCEPTANCE"] = "acceptance";
})(Type = exports.Type || (exports.Type = {}));
var Behavior;
(function (Behavior) {
    Behavior["UNDEFINED"] = "undefined";
    Behavior["POSITIVE"] = "positive";
    Behavior["NEGATIVE"] = "negative";
    Behavior["DESTRUCTIVE"] = "destructive";
})(Behavior = exports.Behavior || (exports.Behavior = {}));
var Automation;
(function (Automation) {
    Automation["IS_NOT_AUTOMATED"] = "is-not-automated";
    Automation["AUTOMATED"] = "automated";
    Automation["TO_BE_AUTOMATED"] = "to-be-automated";
})(Automation = exports.Automation || (exports.Automation = {}));
var Filter = /** @class */ (function () {
    function Filter(filters) {
        this.filters = filters;
    }
    Filter.prototype.filter = function () {
        if (this.filters === undefined) {
            return {};
        }
        var res = Object.entries(this.filters).reduce(function (result, item) {
            var key = item[0];
            var value;
            if (item[1] instanceof Array) {
                value = item[1].join(',');
            }
            else {
                value = item[1];
            }
            result["filters[" + key + "]"] = value;
            return result;
        }, {});
        return res;
    };
    return Filter;
}());
exports.Filter = Filter;
//# sourceMappingURL=base.js.map